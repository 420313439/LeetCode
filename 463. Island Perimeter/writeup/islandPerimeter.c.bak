#include <stdio.h>

int islandPerimeter(int** grid, int gridSize, int* gridColSize) 
{
    int p = 0;

    int row = gridSize;
    int col = gridColSize[0];

    //printf("row = %d\n", row);
    //printf("col = %d\n", col);
    for (int i = 0; i < row; i++) {
        for (int j = 0; j < col; j++) {
            if (grid[i][j] == 1) {
                p += 4;
            
                // 中间
                if (i != 0 && i != row - 1 && j != 0 && j != col - 1) {
                    if (grid[i + 1][j] == 1)
                        p -= 1;
                    if (grid[i - 1][j] == 1)
                        p -= 1;
                    if (grid[i][j + 1] == 1)
                        p -= 1;
                    if (grid[i][j - 1] == 1)
                        p -= 1;
                }
                
                // 左上角
                if (i == 0 && j == 0) {    
                    if (grid[i + 1][j] == 1)
                        p -= 1;
                    if (grid[i][j + 1] == 1)
                        p -= 1;
                }

                // 右上角
                if (i == 0 && j == col - 1) {     
                    if (grid[i][j - 1] == 1)
                        p -= 1;
                    if (grid[i + 1][j] == 1)
                        p -= 1;
                }

                //左下角
                if (i == row - 1 && j == 0) {
                    if (grid[i - 1][j] == 1)
                        p -= 1;
                    if (grid[i][j + 1] == 1)
                        p -= 1;
                }

                //右下角
                if (i == row - 1 && j == col - 1) {
                    if (grid[i - 1][j] == 1)
                        p -= 1;
                    if (grid[i][j - 1] == 1)
                        p -= 1;
                }

                // 第一行
                if (i == 0 && j != 0 && j != col - 1) {
                    if (grid[i + 1][j] == 1)
                        p -= 1;
                    if (grid[i][j - 1] == 1)
                        p -= 1;
                    if (grid[i][j + 1] == 1)
                        p -= 1;
                }


                // 最后一行
                if (i == row - 1 && j != 0 && j != col - 1) {
                    if (grid[i - 1][j] == 1)
                        p -= 1;
                    if (grid[i][j - 1] == 1)
                        p -= 1;
                    if (grid[i][j + 1] == 1)
                        p -= 1;
                }

                // 最左列
                if (i != 0 && i != row - 1 && j == 0) {
                    if (grid[i][j + 1] == 1)
                        p -= 1;
                    if (grid[i - 1][j] == 1)
                        p -= 1;
                    if (grid[i + 1][j] == 1)
                        p -= 1;
                }


                // 最右列
                if (i != 0 && i != row - 1 && j == col - 1) {
                    if (grid[i][j - 1] == 1)
                        p -= 1;
                    if (grid[i - 1][j] == 1)
                        p -= 1;
                    if (grid[i + 1][j] == 1)
                        p -= 1;
                }
            }
        }
    }

    return p;
}